---
version: 2.1
jobs:
  build-and-scan-image:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run:
          name: Build Docker image
          command: docker build -t ${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1} .
      - run:
          name: Start Docker image
          command: docker run --entrypoint='/bin/sh' ${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}
      - run:
          name: Start container vulnerability tooling images
          command: | 
            docker run -d --name db arminc/clair-db:latest
            docker run -p 6060:6060 --link db:postgres -d --name clair --restart on-failure arminc/clair-local-scan:latest
      - run:
          name: Download Clair scanning utility
          command: | 
            wget https://github.com/arminc/clair-scanner/releases/download/v8/clair-scanner_linux_amd64
            mv clair-scanner_linux_amd64 clair-scanner
            chmod +x clair-scanner
      - run:
          name: Ensure vulnerability whitelist file exists
          command: touch clair-whitelist.yml
      - run:
          name: Scan docker image for vulnerabilities
          command: | 
            echo "Waiting for Clair DB to start"
            while( ! wget -q -O /dev/null http://localhost:6060/v1/namespaces ) ; do sleep 1 ; echo -n "." ; done
            retries=0
            echo "Waiting for Clair daemon to be ready for scanning"
            while( ! wget -T 10 -q -O /dev/null http://localhost:6060/v1/namespaces ) ; do sleep 1 ; echo -n "." ; if [ $retries -eq 10 ] ; then echo " Timeout, aborting." ; exit 1 ; fi ; retries=$(($retries+1)) ; done
            ./clair-scanner -c http://localhost:6060 --ip $(hostname -i) -t 'Low' -r 'container-scanning-report.json' -l 'clair.log' -w 'clair-whitelist.yml' ${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1}
      - store_artifacts:
          path: ./container-scanning-report.json
          destination: "container-scanning-report-${CIRCLE_SHA1}.json"
      - persist_to_workspace:
          root: .
          paths: ./container-scanning-report.json
      - run:
          name: Log into Google Cloud Registry
          command: |
            echo "$GCR_PASS" | docker login -u _json_key --password-stdin https://eu.gcr.io
      - run:
          name: Push latest image to Google Cloud Registry
          command: |
            docker tag ${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1} "eu.gcr.io/$PROJECT_NAME/spring-petclinic:latest"
            docker push "eu.gcr.io/$PROJECT_NAME/spring-petclinic:latest"
      - run:
          name: Push tagged Image to Google Cloud Registry
          command: |
            if git describe --tags &> /dev/null; then
              docker tag ${CIRCLE_PROJECT_REPONAME}:${CIRCLE_SHA1} "eu.gcr.io/$PROJECT_NAME/spring-petclinic:$(git describe --tags)" 
              docker push "eu.gcr.io/$PROJECT_NAME/spring-petclinic:$(git describe --tags)"
            else
              echo "No tagged version to release"
            fi
workflows:
  version: 2
  build-master:
    jobs:
      - build-and-scan-image:
          filters:
            branches:
              only: master
            tags:
              only: /.*/
